/**
 * Written by Denis Power.
 *
 * builderconfig options.
 *
 *  {
 *  files: string[],
 *  dir: "./core",
 *   types: {
 *    dir: "./types",
 *    files: string[]
 * }
 * }
 *
 *
 *
 */

console.log("Building...");

import builderconfig from "./builderconfig.js";
import { writeFileSync, readFileSync, readdirSync } from "node:fs";
import { format } from "prettier";

const {
  version,
  year,
  files,
  dir,
  types: { dir: typeDir, version: typeVersion },
} = builderconfig;

const Package = JSON.parse(readFileSync("./package.json"));
const packageLock = JSON.parse(readFileSync("./package-lock.json"));

class Inter {
  #source;
  #token;
  #peaceOfCode;
  #parsingExport = false;
  #parsingImport = false;
  #reStartTheLoop = false;
  #importConfig = {
    body: "",
  };
  #exportConfig = {
    name: void 0,
    Default: false,
  };
  #removeExportDeclaration = () => {
    const { name, Default } = this.#exportConfig;

    const pattern1 = new RegExp(`export\\s*${name}`, "g");
    const pattern2 = new RegExp(`export(?:\\s*)default(?:\\s*)${name}`, "g");
    const pattern = Default ? pattern2 : pattern1;
    this.#source = this.#source.replace(pattern, name);
    this.#parsingExport = false;
    this.#reStartTheLoop = true;
  };

  #removeImportDeclaration = () => {
    const { body } = this.#importConfig;
    this.#source = this.#source.replace(body, "");
    this.#importConfig.body = "";
    this.#parsingImport = false;
    this.#reStartTheLoop = true;
  };

  constructor(codeString) {
    this.#source = codeString;
  }

  removeImport() {}

  removeExportAndImportDeclaration(module) {
    for (let i = 0; i < this.#source.length; i++) {
      if (this.#reStartTheLoop) {
        this.#reStartTheLoop = false;
        i = 0;
      }

      this.#peaceOfCode = this.#source[i];

      if (!isBlankSpace(this.#peaceOfCode) && !this.#parsingImport)
        this.#token += this.#peaceOfCode;
      else if (this.#parsingImport) {
        this.#importConfig.body += this.#peaceOfCode;

        if (this.#importConfig.body.endsWith(";")) {
          this.#removeImportDeclaration();
        }
      } else if (isBlankSpace(this.#peaceOfCode) && this.#token) {
        if (
          this.#token == "import" &&
          !this.#parsingImport &&
          !this.#parsingExport
        ) {
          this.#parsingImport = true;
          this.#importConfig.body += "import ";
        } else if (
          this.#token == "export" &&
          !this.#parsingExport &&
          !this.#parsingImport &&
          module !== true
        ) {
          this.#parsingExport = true;
        } else if (this.#parsingExport) {
          const { name } = this.#exportConfig;

          if (!name) {
            if (this.#token !== "default") {
              this.#exportConfig.name = this.#token;
              this.#removeExportDeclaration();
            } else this.#exportConfig.Default = true;
          }
        }

        this.#token = "";
      }
    }

    return this.#source;
  }
}

function isBlankSpace(code) {
  return /\s/.test(code);
}

if (!files) throw new Error("No `builderconfing.js` file found");

function buildTsDeclaration() {
  let body = "";
  const typeFiles = readdirSync(typeDir);

  for (const file of typeFiles) {
    const fileString = readFileSync(`${typeDir}/${file}`);
    body += fileString;
  }

  body = `
  /***
   * MIT LICENSED BY -  Denis Power(Inter creator)
   * Typescript declaration file for Inter version ${version}
   * Version - ${typeVersion}
   * Repo - https://github.com/interjs/inter/types
   * GENERATED BY INTER BUILDER
  */

   ${body}
  
  `;

  writeFileSync("inter.m.d.ts", body);
}

function build(buildType) {
  const isModuleBuild = buildType == "module";
  const isGlobalBuild = buildType == "global";

  let body = "";

  for (const file of files) {
    let fileString = readFileSync(dir ? `${dir}/${file}` : file);
    /**
     * In module build, the exports declaration won't be removed in regular
     * files which contain the Inter core, but the export declaration from
     * the helpers and errors files must be removed, that's why here we're
     * considering them as special.
     */
    const specialFiles = new Set([
      "helpers.js",
      "template/errors.js",
      "renderList/errors.js",
      "ajax/errors.js",
      "ref/errors.js",
      "renderif/errors.js",
      "toattrs/errors.js",
    ]);
    if (specialFiles.has(file) && isModuleBuild) {
      let fileStringBody = "";
      fileStringBody += fileString;
      const frame = new Inter(fileStringBody);
      fileString = frame.removeExportAndImportDeclaration();
    }

    body += fileString;
  }

  const frame = new Inter(body);
  let builtCode;

  if (isGlobalBuild) builtCode = frame.removeExportAndImportDeclaration();
  else if (isModuleBuild)
    builtCode = frame.removeExportAndImportDeclaration(true);

  if (isGlobalBuild) {
    body = `
  
/**
 * Interjs 
 * Version - ${version}
 * MIT LICENSED BY - Denis Power
 * Repo - https://github.com/interjs/inter
 * 2021 - ${year} 
 * GENERATED BY INTER BUILDER
 * 
 */

  (function () {

    ${builtCode};
	  
  window.Ref = Ref;
  window.renderIf = renderIf;
  window.renderList = renderList;
  window.template = template;
  window.toAttrs = toAttrs;
  window.Backend = Backend;
  console.log("The global version ${version} of Inter was loaded successfully.")

  })();
  
`;
  } else if (isModuleBuild) {
    body = ` 
	
/**
 * Interjs 
 * Version - ${version}
 * MIT LICENSED BY - Denis Power
 * Repo - https://github.com/interjs/inter
 * 2021 - ${year} 
 * GENERATED BY INTER BUILDER
 * Module version
 */
    
export const interVersion = "${version}";
${builtCode}
    `;
  }

  if (isGlobalBuild) writeFileSync("inter.js", format(body));
  else if (isModuleBuild) writeFileSync("inter.m.js", format(body));

  Package.version = version;
  packageLock.version = version;

  writeFileSync("package.json", JSON.stringify(Package));
  writeFileSync("package-lock.json", JSON.stringify(packageLock));
}

buildTsDeclaration();
build("global");
build("module");

console.log("Inter Built Successfully");
